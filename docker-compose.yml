version: '3.8'

services:
  gateway:
    build:
      dockerfile: Dockerfile
      context: gateway/
    ports:
      - "4000:4000"
    depends_on:
      - user-service-1
      - user-service-2
      - user-service-3
      - booking-service-1
      - booking-service-2
      - booking-service-3
    networks:
      - booking-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      service_type: gateway

  user-service-1:
    build: 
      dockerfile: Dockerfile
      context: user-service/
    ports:
      - "5000:5000"
    depends_on:
      - user-service-db
    networks:
      - booking-network
    labels:
      service_type: user-service
      instance: user-service-1

  user-service-2:
    build: 
      dockerfile: Dockerfile
      context: user-service/
    ports:
      - "5001:5000"
    depends_on:
      - user-service-db
    networks:
      - booking-network
    labels:
      service_type: user-service
      instance: user-service-2

  user-service-3:
    build: 
      dockerfile: Dockerfile
      context: user-service/
    ports:
      - "5002:5000"
    depends_on:
      - user-service-db
    networks:
      - booking-network
    labels:
      service_type: user-service
      instance: user-service-3

  user-service-db:
    image: postgres:17
    environment:
      - POSTGRES_DB=user_service_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=nikita
    volumes:
      - ./user-service-db/init-user.sql:/docker-entrypoint-initdb.d/init-user.sql
    ports:
      - "5432:5432"
    networks:
      - booking-network
    labels:
      - user-service-db
      
  booking-service-1:
    build:
      dockerfile: Dockerfile
      context: booking-service/
    ports:
      - "5003:5003"
    depends_on:
      - booking-service-db
    networks:
      - booking-network
    labels:
      service_type: booking-service
      instance: booking-service-1

  booking-service-2:
    build:
      dockerfile: Dockerfile
      context: booking-service/
    ports:
      - "5004:5003"
    depends_on:
      - booking-service-db
    networks:
      - booking-network
    labels:
      service_type: booking-service
      instance: booking-service-2

  booking-service-3:
    build:
      dockerfile: Dockerfile
      context: booking-service/
    ports:
      - "5005:5003"
    depends_on:
      - booking-service-db
    networks:
      - booking-network
    labels:
      service_type: booking-service
      instance: booking-service-3
    
  booking-service-db:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=nikita
      - MYSQL_DATABASE=bookingdb
    volumes:
      - ./booking-service-db/init-booking.sql:/docker-entrypoint-initdb.d/init-booking.sql
    ports:
      - "3307:3306"
    networks:
      - booking-network
    labels:
      service_type: booking-service-db

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - booking-network
    labels:
      service_type: redis

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - gateway
      - user-service-1
      - user-service-2
      - user-service-3
      - booking-service-1
      - booking-service-2
      - booking-service-3
    networks:
      - booking-network
    labels:
      service_type: prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_LOG_LEVEL=silent
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=user
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - booking-network
    labels:
      service_type: grafana

  # --------------------------
  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - booking-network

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - booking-network
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin  
  #   container_name: grafana
    
networks:
  booking-network:
    driver: bridge

      